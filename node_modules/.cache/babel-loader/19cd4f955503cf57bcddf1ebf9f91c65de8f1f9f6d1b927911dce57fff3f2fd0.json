{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drago\\\\OneDrive\\\\Desktop\\\\sussa-troue\\\\src\\\\pages\\\\ResetPasswordUpdatePage.jsx\",\n  _s = $RefreshSig$();\n// File: src/pages/ResetPasswordUpdatePage.jsx\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"../supabaseClient\";\nimport { toast } from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport AuthLayout from \"../components/AuthLayout\";\nimport { AUTH_SLIDES, AUTH_CAPTIONS } from \"./_authAssets\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResetPasswordUpdatePage() {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const [confirm, setConfirm] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [formErr, setFormErr] = useState(\"\");\n  const [sessionReady, setSessionReady] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    (async () => {\n      const {\n        data,\n        error\n      } = await supabase.auth.getSession();\n      if (error || !(data !== null && data !== void 0 && data.session)) {\n        setFormErr(\"Your reset link is invalid or expired. Request a new one.\");\n      }\n      setSessionReady(true);\n    })();\n  }, []);\n  const submit = async e => {\n    e.preventDefault();\n    if (loading) return;\n    setFormErr(\"\");\n    const pw = (password || \"\").trim();\n    const pw2 = (confirm || \"\").trim();\n    if (!pw || !pw2) return setFormErr(\"Please enter and confirm your new password.\");\n    if (pw.length < 8) return setFormErr(\"Password must be at least 8 characters.\");\n    if (pw !== pw2) return setFormErr(\"Passwords do not match.\");\n    setLoading(true);\n    try {\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        password: pw\n      });\n      if (error) throw error;\n      toast.success(\"Password updated! You can now log in.\");\n      navigate(\"/login\", {\n        replace: true\n      });\n    } catch (err) {\n      const msg = (err === null || err === void 0 ? void 0 : err.message) || \"Could not update password. Try requesting a new link.\";\n      setFormErr(msg);\n      toast.error(msg);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthLayout, {\n    slides: AUTH_SLIDES,\n    captions: AUTH_CAPTIONS,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"section-title text-center\",\n      children: \"Set a New Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), !!formErr && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md p-2\",\n      role: \"alert\",\n      children: formErr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submit,\n      className: \"mt-4 space-y-3\",\n      \"aria-busy\": loading ? \"true\" : \"false\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block\",\n        htmlFor: \"new_password\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"New password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"new_password\",\n          className: \"input\",\n          type: \"password\",\n          placeholder: \"New password (min 8 chars)\",\n          autoComplete: \"new-password\",\n          value: password,\n          minLength: 8,\n          onChange: e => setPassword(e.target.value),\n          disabled: loading || !sessionReady,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block\",\n        htmlFor: \"confirm_password\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"Confirm new password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"confirm_password\",\n          className: \"input\",\n          type: \"password\",\n          placeholder: \"Confirm new password\",\n          autoComplete: \"new-password\",\n          value: confirm,\n          onChange: e => setConfirm(e.target.value),\n          disabled: loading || !sessionReady,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary w-full\",\n        type: \"submit\",\n        disabled: loading || !sessionReady,\n        children: loading ? \"Updatingâ€¦\" : \"Update Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPasswordUpdatePage, \"QAidbCa9oDZ0FbilV0HJ2fEU8bc=\", false, function () {\n  return [useNavigate];\n});\n_c = ResetPasswordUpdatePage;\nvar _c;\n$RefreshReg$(_c, \"ResetPasswordUpdatePage\");","map":{"version":3,"names":["useEffect","useState","supabase","toast","useNavigate","AuthLayout","AUTH_SLIDES","AUTH_CAPTIONS","jsxDEV","_jsxDEV","ResetPasswordUpdatePage","_s","password","setPassword","confirm","setConfirm","loading","setLoading","formErr","setFormErr","sessionReady","setSessionReady","navigate","data","error","auth","getSession","session","submit","e","preventDefault","pw","trim","pw2","length","updateUser","success","replace","err","msg","message","slides","captions","children","className","fileName","_jsxFileName","lineNumber","columnNumber","role","onSubmit","htmlFor","id","type","placeholder","autoComplete","value","minLength","onChange","target","disabled","required","_c","$RefreshReg$"],"sources":["C:/Users/drago/OneDrive/Desktop/sussa-troue/src/pages/ResetPasswordUpdatePage.jsx"],"sourcesContent":["// File: src/pages/ResetPasswordUpdatePage.jsx\r\nimport { useEffect, useState } from \"react\";\r\nimport { supabase } from \"../supabaseClient\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport AuthLayout from \"../components/AuthLayout\";\r\nimport { AUTH_SLIDES, AUTH_CAPTIONS } from \"./_authAssets\";\r\n\r\nexport default function ResetPasswordUpdatePage() {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirm, setConfirm] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [formErr, setFormErr] = useState(\"\");\r\n  const [sessionReady, setSessionReady] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { data, error } = await supabase.auth.getSession();\r\n      if (error || !data?.session) {\r\n        setFormErr(\"Your reset link is invalid or expired. Request a new one.\");\r\n      }\r\n      setSessionReady(true);\r\n    })();\r\n  }, []);\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    if (loading) return;\r\n    setFormErr(\"\");\r\n\r\n    const pw = (password || \"\").trim();\r\n    const pw2 = (confirm || \"\").trim();\r\n\r\n    if (!pw || !pw2) return setFormErr(\"Please enter and confirm your new password.\");\r\n    if (pw.length < 8) return setFormErr(\"Password must be at least 8 characters.\");\r\n    if (pw !== pw2) return setFormErr(\"Passwords do not match.\");\r\n\r\n    setLoading(true);\r\n    try {\r\n      const { error } = await supabase.auth.updateUser({ password: pw });\r\n      if (error) throw error;\r\n      toast.success(\"Password updated! You can now log in.\");\r\n      navigate(\"/login\", { replace: true });\r\n    } catch (err) {\r\n      const msg = err?.message || \"Could not update password. Try requesting a new link.\";\r\n      setFormErr(msg);\r\n      toast.error(msg);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthLayout slides={AUTH_SLIDES} captions={AUTH_CAPTIONS}>\r\n      <h1 className=\"section-title text-center\">Set a New Password</h1>\r\n\r\n      {!!formErr && (\r\n        <div\r\n          className=\"mt-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md p-2\"\r\n          role=\"alert\"\r\n        >\r\n          {formErr}\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={submit} className=\"mt-4 space-y-3\" aria-busy={loading ? \"true\" : \"false\"}>\r\n        <label className=\"block\" htmlFor=\"new_password\">\r\n          <span className=\"sr-only\">New password</span>\r\n          <input\r\n            id=\"new_password\"\r\n            className=\"input\"\r\n            type=\"password\"\r\n            placeholder=\"New password (min 8 chars)\"\r\n            autoComplete=\"new-password\"\r\n            value={password}\r\n            minLength={8}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            disabled={loading || !sessionReady}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className=\"block\" htmlFor=\"confirm_password\">\r\n          <span className=\"sr-only\">Confirm new password</span>\r\n          <input\r\n            id=\"confirm_password\"\r\n            className=\"input\"\r\n            type=\"password\"\r\n            placeholder=\"Confirm new password\"\r\n            autoComplete=\"new-password\"\r\n            value={confirm}\r\n            onChange={(e) => setConfirm(e.target.value)}\r\n            disabled={loading || !sessionReady}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button className=\"btn-primary w-full\" type=\"submit\" disabled={loading || !sessionReady}>\r\n          {loading ? \"Updatingâ€¦\" : \"Update Password\"}\r\n        </button>\r\n      </form>\r\n    </AuthLayout>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}