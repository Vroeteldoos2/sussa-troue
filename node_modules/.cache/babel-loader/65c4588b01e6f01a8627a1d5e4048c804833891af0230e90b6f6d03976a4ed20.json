{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drago\\\\OneDrive\\\\Desktop\\\\sussa-troue\\\\src\\\\components\\\\GoogleDrivePicker.jsx\",\n  _s = $RefreshSig$();\n// File: src/components/GoogleDrivePicker.jsx\nimport { useCallback, useMemo, useRef, useState } from \"react\";\n\n// ENV (CRA)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_GOOGLE_API_KEY; // required\nconst CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID; // required\n// Scopes: upload to user's Drive (and to a provided folder)\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\nfunction loadScript(src) {\n  return new Promise((resolve, reject) => {\n    if (document.querySelector(`script[src=\"${src}\"]`)) return resolve();\n    const s = document.createElement(\"script\");\n    s.src = src;\n    s.async = true;\n    s.onload = () => resolve();\n    s.onerror = () => reject(new Error(`Failed to load ${src}`));\n    document.head.appendChild(s);\n  });\n}\nasync function ensureGoogleApis() {\n  // 1) GIS OAuth\n  await loadScript(\"https://accounts.google.com/gsi/client\");\n  // 2) GAPI (picker + client)\n  await loadScript(\"https://apis.google.com/js/api.js\");\n  // Ensure gapi object is loaded\n  await new Promise(resolve => {\n    var _window$gapi;\n    if ((_window$gapi = window.gapi) !== null && _window$gapi !== void 0 && _window$gapi.load) return resolve();\n    const check = setInterval(() => {\n      var _window$gapi2;\n      if ((_window$gapi2 = window.gapi) !== null && _window$gapi2 !== void 0 && _window$gapi2.load) {\n        clearInterval(check);\n        resolve();\n      }\n    }, 20);\n  });\n  // Load picker + client modules\n  await new Promise(resolve => window.gapi.load(\"client:picker\", resolve));\n}\nexport default function GoogleDrivePicker({\n  targetFolderId,\n  buttonLabel = \"Upload to Drive\",\n  onPicked // optional callback(files)\n}) {\n  _s();\n  const [busy, setBusy] = useState(false);\n  const tokenClientRef = useRef(null);\n  const ready = useMemo(() => Boolean(API_KEY && CLIENT_ID), []);\n  const getAccessToken = useCallback(() => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await ensureGoogleApis();\n        if (!tokenClientRef.current) {\n          tokenClientRef.current = window.google.accounts.oauth2.initTokenClient({\n            client_id: CLIENT_ID,\n            scope: SCOPES,\n            callback: resp => {\n              if (resp.error) reject(resp);else resolve(resp.access_token);\n            }\n          });\n        } else {\n          // set a fresh callback for this request\n          tokenClientRef.current.callback = resp => {\n            if (resp.error) reject(resp);else resolve(resp.access_token);\n          };\n        }\n        tokenClientRef.current.requestAccessToken({\n          prompt: \"\"\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }, []);\n  const openPicker = useCallback(async () => {\n    try {\n      setBusy(true);\n      const accessToken = await getAccessToken();\n\n      // Init gapi client with our API key (Picker needs developerKey)\n      await window.gapi.client.init({\n        apiKey: API_KEY\n      });\n\n      // Build upload view; if folder provided, upload directly into it\n      const uploadView = new window.google.picker.DocsUploadView();\n      if (targetFolderId) {\n        uploadView.setParent(targetFolderId);\n      }\n      const picker = new window.google.picker.PickerBuilder().addView(uploadView).enableFeature(window.google.picker.Feature.MULTISELECT_ENABLED).setOAuthToken(accessToken).setDeveloperKey(API_KEY).setOrigin(window.location.protocol + \"//\" + window.location.host).setCallback(data => {\n        if (data.action === window.google.picker.Action.PICKED) {\n          const files = (data.docs || []).map(d => ({\n            id: d.id,\n            name: d.name,\n            type: d.type,\n            url: d.url,\n            mimeType: d.mimeType\n          }));\n          onPicked === null || onPicked === void 0 ? void 0 : onPicked(files);\n        }\n      }).build();\n      picker.setVisible(true);\n    } catch (err) {\n      console.error(err);\n      alert((err === null || err === void 0 ? void 0 : err.message) || \"Could not open Google Drive Picker. Check API key/client ID and allowed origins.\");\n    } finally {\n      setBusy(false);\n    }\n  }, [getAccessToken, onPicked, targetFolderId]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    className: \"btn-primary\",\n    disabled: !ready || busy,\n    onClick: openPicker,\n    title: !ready ? \"Missing Google API env vars\" : \"\",\n    children: busy ? \"Openingâ€¦\" : buttonLabel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleDrivePicker, \"ci05RiOBNQLugUENabbT5s2jzNk=\");\n_c = GoogleDrivePicker;\nvar _c;\n$RefreshReg$(_c, \"GoogleDrivePicker\");","map":{"version":3,"names":["useCallback","useMemo","useRef","useState","jsxDEV","_jsxDEV","API_KEY","process","env","REACT_APP_GOOGLE_API_KEY","CLIENT_ID","REACT_APP_GOOGLE_CLIENT_ID","SCOPES","loadScript","src","Promise","resolve","reject","document","querySelector","s","createElement","async","onload","onerror","Error","head","appendChild","ensureGoogleApis","_window$gapi","window","gapi","load","check","setInterval","_window$gapi2","clearInterval","GoogleDrivePicker","targetFolderId","buttonLabel","onPicked","_s","busy","setBusy","tokenClientRef","ready","Boolean","getAccessToken","current","google","accounts","oauth2","initTokenClient","client_id","scope","callback","resp","error","access_token","requestAccessToken","prompt","e","openPicker","accessToken","client","init","apiKey","uploadView","picker","DocsUploadView","setParent","PickerBuilder","addView","enableFeature","Feature","MULTISELECT_ENABLED","setOAuthToken","setDeveloperKey","setOrigin","location","protocol","host","setCallback","data","action","Action","PICKED","files","docs","map","d","id","name","type","url","mimeType","build","setVisible","err","console","alert","message","className","disabled","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/drago/OneDrive/Desktop/sussa-troue/src/components/GoogleDrivePicker.jsx"],"sourcesContent":["// File: src/components/GoogleDrivePicker.jsx\r\nimport { useCallback, useMemo, useRef, useState } from \"react\";\r\n\r\n// ENV (CRA)\r\nconst API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;          // required\r\nconst CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;      // required\r\n// Scopes: upload to user's Drive (and to a provided folder)\r\nconst SCOPES = \"https://www.googleapis.com/auth/drive.file\";\r\n\r\nfunction loadScript(src) {\r\n  return new Promise((resolve, reject) => {\r\n    if (document.querySelector(`script[src=\"${src}\"]`)) return resolve();\r\n    const s = document.createElement(\"script\");\r\n    s.src = src;\r\n    s.async = true;\r\n    s.onload = () => resolve();\r\n    s.onerror = () => reject(new Error(`Failed to load ${src}`));\r\n    document.head.appendChild(s);\r\n  });\r\n}\r\n\r\nasync function ensureGoogleApis() {\r\n  // 1) GIS OAuth\r\n  await loadScript(\"https://accounts.google.com/gsi/client\");\r\n  // 2) GAPI (picker + client)\r\n  await loadScript(\"https://apis.google.com/js/api.js\");\r\n  // Ensure gapi object is loaded\r\n  await new Promise((resolve) => {\r\n    if (window.gapi?.load) return resolve();\r\n    const check = setInterval(() => {\r\n      if (window.gapi?.load) {\r\n        clearInterval(check);\r\n        resolve();\r\n      }\r\n    }, 20);\r\n  });\r\n  // Load picker + client modules\r\n  await new Promise((resolve) => window.gapi.load(\"client:picker\", resolve));\r\n}\r\n\r\nexport default function GoogleDrivePicker({\r\n  targetFolderId,\r\n  buttonLabel = \"Upload to Drive\",\r\n  onPicked, // optional callback(files)\r\n}) {\r\n  const [busy, setBusy] = useState(false);\r\n  const tokenClientRef = useRef(null);\r\n\r\n  const ready = useMemo(() => Boolean(API_KEY && CLIENT_ID), []);\r\n\r\n  const getAccessToken = useCallback(() => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        await ensureGoogleApis();\r\n\r\n        if (!tokenClientRef.current) {\r\n          tokenClientRef.current = window.google.accounts.oauth2.initTokenClient({\r\n            client_id: CLIENT_ID,\r\n            scope: SCOPES,\r\n            callback: (resp) => {\r\n              if (resp.error) reject(resp);\r\n              else resolve(resp.access_token);\r\n            },\r\n          });\r\n        } else {\r\n          // set a fresh callback for this request\r\n          tokenClientRef.current.callback = (resp) => {\r\n            if (resp.error) reject(resp);\r\n            else resolve(resp.access_token);\r\n          };\r\n        }\r\n        tokenClientRef.current.requestAccessToken({ prompt: \"\" });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const openPicker = useCallback(async () => {\r\n    try {\r\n      setBusy(true);\r\n      const accessToken = await getAccessToken();\r\n\r\n      // Init gapi client with our API key (Picker needs developerKey)\r\n      await window.gapi.client.init({ apiKey: API_KEY });\r\n\r\n      // Build upload view; if folder provided, upload directly into it\r\n      const uploadView = new window.google.picker.DocsUploadView();\r\n      if (targetFolderId) {\r\n        uploadView.setParent(targetFolderId);\r\n      }\r\n\r\n      const picker = new window.google.picker.PickerBuilder()\r\n        .addView(uploadView)\r\n        .enableFeature(window.google.picker.Feature.MULTISELECT_ENABLED)\r\n        .setOAuthToken(accessToken)\r\n        .setDeveloperKey(API_KEY)\r\n        .setOrigin(window.location.protocol + \"//\" + window.location.host)\r\n        .setCallback((data) => {\r\n          if (data.action === window.google.picker.Action.PICKED) {\r\n            const files = (data.docs || []).map((d) => ({\r\n              id: d.id,\r\n              name: d.name,\r\n              type: d.type,\r\n              url: d.url,\r\n              mimeType: d.mimeType,\r\n            }));\r\n            onPicked?.(files);\r\n          }\r\n        })\r\n        .build();\r\n\r\n      picker.setVisible(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\r\n        err?.message ||\r\n          \"Could not open Google Drive Picker. Check API key/client ID and allowed origins.\"\r\n      );\r\n    } finally {\r\n      setBusy(false);\r\n    }\r\n  }, [getAccessToken, onPicked, targetFolderId]);\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn-primary\"\r\n      disabled={!ready || busy}\r\n      onClick={openPicker}\r\n      title={!ready ? \"Missing Google API env vars\" : \"\"}\r\n    >\r\n      {busy ? \"Openingâ€¦\" : buttonLabel}\r\n    </button>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}